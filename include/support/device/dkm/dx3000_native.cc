
#include "dx3000.hpp"
#include <openedge/log.hpp>
#include <openedge/device/bus.hpp>
#include <3rdparty/libmodbus/modbus.h>
#include <3rdparty/libmodbus/modbus-rtu.h>
#include <3rdparty/spdlog/fmt/bin_to_hex.h>

static modbus_t* _modbus = nullptr;

namespace oe::support {

    /* Table of CRC values for high-order byte */
static const uint8_t table_crc_hi[] = {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
};

/* Table of CRC values for low-order byte */
static const uint8_t table_crc_lo[] = {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
    0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
    0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
    0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
    0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
    0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
    0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
    0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
    0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
    0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
    0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
    0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
    0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
    0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};


    DKM_DX3000_NATIVE::DKM_DX3000_NATIVE(int id)
    :oe::device:: controller(id){

    }

    DKM_DX3000_NATIVE::~DKM_DX3000_NATIVE(){
        // this->stop();
    }

    bool DKM_DX3000_NATIVE::open(){
        return true;
    }

    void DKM_DX3000_NATIVE::close(){
        
    }

    int DKM_DX3000_NATIVE::move(unsigned char* dest, DIRECTION dir){

        switch(dir){
            case DIRECTION::NONE: {

            }
            break;

            // Clockwise : Backward movement
            case DIRECTION::CW: {

                unsigned char frame[8] = {
                    0x01,   //slave id
                    0x06,   //function code
                    0x00, 0x05, //register offset
                    0x00, 0x04, //number of registers
                    0x00, 0x00  //crc16
                };
                unsigned short crc = _crc16(frame, 6);
                frame[6] = (crc >> 8) & 0xff;
                frame[7] = crc & 0xff;
                console::info("Buffer {:X}", spdlog::to_hex(std::begin(frame), std::end(frame), 16));
                memcpy(dest, frame, sizeof(frame));
                return sizeof(frame);
            }
            break;

            case DIRECTION::CCW: {

                unsigned char frame[8] = {
                    0x01,   //slave id
                    0x06,   //function code
                    0x00, 0x05, //register offset
                    0x00, 0x02, //number of registers
                    0x00, 0x00  //crc16
                };
                unsigned short crc = _crc16(frame, 6);
                frame[6] = (crc >> 8) & 0xff;
                frame[7] = crc & 0xff;
                console::info("Buffer {:X}", spdlog::to_hex(std::begin(frame), std::end(frame), 16));
                memcpy(dest, frame, sizeof(frame));
                return sizeof(frame);
            }
            break;
        }
        
        return false;
    }

    int DKM_DX3000_NATIVE::stop(unsigned char* dest){
        // if(_modbus){
        //     if(modbus_write_register(_modbus, 0x0005, 0x0001))
        //         return true;
        // }

        unsigned char frame[8] = {
                    0x01,   //slave id
                    0x06,   //function code
                    0x00, 0x05, //register offset
                    0x00, 0x01, //number of registers
                    0x00, 0x00  //crc16
                };
                unsigned short crc = _crc16(frame, 6);
                frame[6] = (crc >> 8) & 0xff;
                frame[7] = crc & 0xff;
                console::info("Buffer {:X}", spdlog::to_hex(std::begin(frame), std::end(frame), 16));
                memcpy(dest, frame, sizeof(frame));
                return sizeof(frame);

    }

    bool DKM_DX3000_NATIVE::set_parameter(PARAMETER opt, variant<int, double> param){

        // if(!_bus){
        //     return false;
        // }

        // switch(opt){
        //     case PARAMETER::SET_DEFAULT: {} break;
        //     case PARAMETER::SET_MAX_SPEED: {} break;
        //     case PARAMETER::SET_SPEED_LIMIT:{}  break;
        //     case PARAMETER::SET_ACC_TIME: {} break;
        //     case PARAMETER::SET_DIR: {} break;
        //     case PARAMETER::SET_GEAR_RATIO: {} break;
        //     case PARAMETER::SET_CONTROL_MODE: {} break;
        //     case PARAMETER::SET_ZERO_CLAMP: {} break;
        //     case PARAMETER::SET_RPM_OFFSET:{}  break;
        //     case PARAMETER::SET_GAIN_P: {} break;
        //     case PARAMETER::SET_GAIN_I: {} break;
        //     case PARAMETER::SET_ID: {
        //         console::info("Set controller MODBUS Slave ID : {}", std::get<int>(param));
        //     } break;
        //     case PARAMETER::SET_IO_CONFIG: {} break;
        //     case PARAMETER::SET_SPEED_CONFIG: {} break;
        //     case PARAMETER::SET_BAUDRATE: {} break;
        //     case PARAMETER::SET_MEM_RPM1: {} break;
        //     case PARAMETER::SET_MEM_RPM2: {} break;
        //     case PARAMETER::SET_MEM_RPM3: {} break;
        //     case PARAMETER::SET_MEM_TORQUE1: {} break;
        //     case PARAMETER::SET_MEM_TORQUE2: {} break;
        //     case PARAMETER::SET_MEM_TORQUE3: {} break;
        //     default:
        //         console::warn("Setting configuration({}) does not exist", static_cast<int>(opt));
        // }

        return true;
    }

    int DKM_DX3000_NATIVE::set_rpm(unsigned char* dest, unsigned short rpm){
        // if(_modbus){
        //     if(modbus_write_register(_modbus, 0x0001, rpm))
        //         return true;
        // }
        unsigned char frame[8] = {
                    0x01,   //slave id
                    0x06,   //function code
                    0x00, 0x01, //register offset
                    0x00, 0x01, //value
                    0x00, 0x00  //crc16
                };
                frame[4] = (rpm >> 8) & 0xff;
                frame[5] = rpm & 0xff;
                unsigned short crc = _crc16(frame, 6);
                frame[6] = (crc >> 8) & 0xff;
                frame[7] = crc & 0xff;
                console::info("Set RPM Buffer {:X}", spdlog::to_hex(std::begin(frame), std::end(frame), 16));
                memcpy(dest, frame, sizeof(frame));
                return sizeof(frame);

        return false;
    }

    unsigned short DKM_DX3000_NATIVE::get_rpm(unsigned char* dest){
        // if(_modbus){
        //     unsigned short rpm = 0;
        //     if(modbus_read_input_registers(_modbus, 0x0002, 1, &rpm))
        //         return rpm;
        // }
        return 0;
    }

    unsigned short DKM_DX3000_NATIVE::get_status(unsigned char* dest){
        // if(_modbus){
        //     unsigned short status = 0;
        //     if(modbus_read_input_registers(_modbus, 0x0003, 1, &status))
        //         return status;
        // }
        return 0;
    }

    unsigned short DKM_DX3000_NATIVE::_crc16(unsigned char* buffer, unsigned short buffer_len)
    {
        uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
        uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
        unsigned int i; /* will index into CRC lookup */

        /* pass through message buffer */
        while (buffer_len--) {
            i = crc_hi ^ *buffer++; /* calculate the CRC  */
            crc_hi = crc_lo ^ table_crc_hi[i];
            crc_lo = table_crc_lo[i];
        }

        return (crc_hi << 8 | crc_lo);
    }

} //namespace
